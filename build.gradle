apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = "com.google.api"
version = "0.0.0-SNAPSHOT"

// Dependencies
// ------------

ext {
  generatedSrcDir = "${projectDir}/generated/src"

  // Shortcuts for libraries we are using
  libraries = [
      grpc: 'io.grpc:grpc-all:0.9.0',
      guava: 'com.google.guava:guava:18.0',
      jsr305: 'com.google.code.findbugs:jsr305:3.0.0',
      autovalue: 'com.google.auto.value:auto-value:1.1',
      guice: 'com.google.inject:guice:4.0',

      // Testing
      junit: 'junit:junit:4.11',
      mockito: 'org.mockito:mockito-core:1.10.19',
      truth: 'com.google.truth:truth:0.27',
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile libraries.grpc,
    libraries.guava,
    libraries.guice,
    libraries.jsr305,
    libraries.autovalue

  testCompile libraries.junit,
    libraries.mockito,
    libraries.truth
}

sourceSets {
  main {
    java {
      // Include location of sources generated from proto
      srcDir "${generatedSrcDir}/main/java"
    }
  }
  test {
    java {
      // Include location of sources generated from proto
      srcDir "${generatedSrcDir}/test/java"
    }
  }
}

// Source jar
// ----------

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

// Test Logging
// ------------

test {
  testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}


// Eclipse Annotation Processing
// -----------------------------

// TODO(wrwg): figure whether there is direct support for this in eclipse plugin,
// and use that instead.

ext {
  eclipseAptFolder = '.apt_generated'
  eclipseSettingsDir = file('.settings')
}

configurations {
  codeGeneration
}

dependencies {
  codeGeneration libraries.autovalue, libraries.jsr305
  compile libraries.autovalue, libraries.jsr305
}

compileJava.classpath += configurations.codeGeneration

eclipse {
  jdt.file.withProperties {
    it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled'
  }
}

tasks.eclipseJdt {
  doFirst {
    def aptPrefs =
        file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs")
    aptPrefs.parentFile.mkdirs()

    aptPrefs.text = """\
        eclipse.preferences.version=1
        org.eclipse.jdt.apt.aptEnabled=true
        org.eclipse.jdt.apt.genSrcDir=${eclipseAptFolder}
        org.eclipse.jdt.apt.reconcileEnabled=true
        """.stripIndent()

    file('.factorypath').withWriter {
      new groovy.xml.MarkupBuilder(it).'factorypath' {
        project.configurations.codeGeneration.each { dep->
          factorypathentry(
            kind:'EXTJAR',
            id:dep.absolutePath,
            enabled:true,
            runInBatchMode:false)
        }
      }
    }
  }
}

tasks.cleanEclipseJdt {
  doFirst {
    delete file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs"),
      file('.factorypath')
  }
}
